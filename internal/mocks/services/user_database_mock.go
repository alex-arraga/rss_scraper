// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/service_users.go

// Package mocks_services is a generated GoMock package.
package mocks_services

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/alex-arraga/rss_project/internal/database/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockUserDatabase is a mock of UserDatabase interface.
type MockUserDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockUserDatabaseMockRecorder
}

// MockUserDatabaseMockRecorder is the mock recorder for MockUserDatabase.
type MockUserDatabaseMockRecorder struct {
	mock *MockUserDatabase
}

// NewMockUserDatabase creates a new mock instance.
func NewMockUserDatabase(ctrl *gomock.Controller) *MockUserDatabase {
	mock := &MockUserDatabase{ctrl: ctrl}
	mock.recorder = &MockUserDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDatabase) EXPECT() *MockUserDatabaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserDatabase) CreateUser(ctx context.Context, params sqlc.CreateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, params)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDatabaseMockRecorder) CreateUser(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDatabase)(nil).CreateUser), ctx, params)
}

// GetPostsForUser mocks base method.
func (m *MockUserDatabase) GetPostsForUser(ctx context.Context, params sqlc.GetPostsForUserParams) ([]sqlc.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsForUser", ctx, params)
	ret0, _ := ret[0].([]sqlc.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsForUser indicates an expected call of GetPostsForUser.
func (mr *MockUserDatabaseMockRecorder) GetPostsForUser(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsForUser", reflect.TypeOf((*MockUserDatabase)(nil).GetPostsForUser), ctx, params)
}

// GetUserByAPIKey mocks base method.
func (m *MockUserDatabase) GetUserByAPIKey(ctx context.Context, apiKey string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAPIKey indicates an expected call of GetUserByAPIKey.
func (mr *MockUserDatabaseMockRecorder) GetUserByAPIKey(ctx, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAPIKey", reflect.TypeOf((*MockUserDatabase)(nil).GetUserByAPIKey), ctx, apiKey)
}
